openapi: 3.0.0
servers:
  - url: https://api.iyzipay.com/payment/
    description: Live server
  - url: https://sandox-api.iyzipay.com/payment/
    description: Sandbox server
info:
  description: |
    # Intro
    The iyzico API has been developed to support merchants with extended online payment services and can be easily integrated into existing platforms. <br/>
    All services are based on a stateless RESTful service architecture that requires API clients to access these services.

    # Authentication
    iyzico APIs requires two pairs of credentials.
    - `apiKey`
    - `secretKey`
    <SecurityDefinitions/>

    # Authorization
    - pkiString
    - v1
    - v2

    # Live vs Sandbox
    Our ENVs are exactly same regarding architecture. <br/>
    The only difference between our LIVE and Sandbox ENVs is URL paths on your API call.

    | **LIVE ENV URL Path**   | **Sandbox ENV URL Path**        |
    |-------------------------|---------------------------------|
    | https://api.iyzipay.com | https://sandbox-api.iyzipay.com |

    # Errors
    Following table represents format of error variables. <br/>
    Case includes "status":"failure" once iyzico PaymentAPI respond with error.  
    | **Key**      | **Value**                      |
    |--------------|--------------------------------|
    | errorCode    | Sample: 10051                  |
    | errorGroup   | Sample: NOT_SUFFICIENT _ FUNDS |
    | errorName    | Sample: Error                  |
    | errorMessage | Sample: Insufficient funds     |

    > Please consider that only processed trx will cover up **4** variables. <br/>
    > Depending on the error type, some of the variables will not be appear. <br/>
    > For an instance, validation errors comes with `errorCode` and `errorMessage`.

  version: 1.0.0
  title: PWI API
  contact:
    name: API Support
    email: integration@iyzico.com
  x-logo:
    url: 'https://www.iyzico.com/assets/images/content/logo.svg?v=v4.0.199'
tags:
  # - name: pet
  #   description: Everything about your Pets
  # - name: store
  #   description: Access to Petstore orders
  - name: Pwi
    description: Wallet solution of iyzico.
  - name: Refund
    description: Refund orders
  - name: Cancel
    description: Cancel orders
  - name: user
    description: Operations about user
  - name: pet_model
    x-displayName: The Pet Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Pet" />
  - name: store_model
    x-displayName: The Order Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Order" exampleRef="#/components/examples/Order" showReadOnly={true} showWriteOnly={true} />
x-tagGroups:
  - name: API
    tags:
      # - pet
      # - store
      - Pwi
      - Refund
      - Cancel
  # - name: User Management
  #   tags:
  #     - user
  # - name: Models
  #   tags:
  #     - pet_model
  #     - store_model
paths:
  /cancel:
    parameters:
      # TODO: Description bul
      - name: Authorization
        in: header
        description: "Unique bla bla bla"
        example: IYZWS YOUR_API_KEY:PKI_STRING
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        example: application/json
        required: true
        schema:
          type: string
      - name: x-iyzi-rnd
        in: header
        description: "Unique ID you will assign to header."
        example: 123ABC456
        required: true
        schema:
          type: string
    post:
      tags:
        - Cancel
      summary: Cancel
      description: Given request cancel a transaction. <br/>There are 1(one) distinguishable required variable in the payload.
      operationId: createPwi
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cancel'
        description: Created user object
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cancel-Response'
  /pet:
    parameters:
      - name: Accept-Language
        in: header
        description: "The language you prefer for messages. Supported values are en-AU, en-CA, en-GB, en-US"
        example: en-US
        required: false
        schema:
          type: string
          default: en-AU
      - name: cookieParam
        in: cookie
        description: Some cookie
        required: true
        schema:
          type: integer
          format: int64
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      description: Add new pet to the store inventory.
      operationId: addPet
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      x-codeSamples:
        - lang: 'C#'
          source: |
            PetStore.v1.Pet pet = new PetStore.v1.Pet();
            pet.setApiKey("your api key");
            pet.petType = PetStore.v1.Pet.TYPE_DOG;
            pet.name = "Rex";
            // set other fields
            PetStoreResponse response = pet.create();
            if (response.statusCode == HttpStatusCode.Created)
            {
              // Successfully created
            }
            else
            {
              // Something wrong -- check response for errors
              Console.WriteLine(response.getRawResponse());
            }
        - lang: PHP
          source: |
            $form = new \PetStore\Entities\Pet();
            $form->setPetType("Dog");
            $form->setName("Rex");
            // set other fields
            try {
                $pet = $client->pets()->create($form);
            } catch (UnprocessableEntityException $e) {
                var_dump($e->getErrors());
            }
      requestBody:
        $ref: '#/components/requestBodies/Pet'
    put:
      tags:
        - pet
      summary: Update an existing pet
      description: ''
      operationId: updatePet
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      x-codeSamples:
        - lang: PHP
          source: |
            $form = new \PetStore\Entities\Pet();
            $form->setPetId(1);
            $form->setPetType("Dog");
            $form->setName("Rex");
            // set other fields
            try {
                $pet = $client->pets()->update($form);
            } catch (UnprocessableEntityException $e) {
                var_dump($e->getErrors());
            }
      requestBody:
        $ref: '#/components/requestBodies/Pet'
  '/pet/{petId}':
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          deprecated: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      description: ''
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the pet
                  type: string
                status:
                  description: Updated status of the pet
                  type: string
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: ''
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
          example: "Bearer <TOKEN>"
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  '/pet/{petId}/uploadImage':
    post:
      tags:
        - pet
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
  /pet/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          style: form
          schema:
            type: array
            minItems: 1
            maxItems: 3
            items:
              type: string
              enum:
                - available
                - pending
                - sold
              default: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /pet/findByTags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: >-
        Multiple tags can be provided with comma separated strings. Use tag1,
        tag2, tag3 for testing.
      operationId: findPetsByTags
      deprecated: true
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          style: form
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: ''
      operationId: placeOrder
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid Order
          content:
            application/json:
              example:
                status: 400
                message: "Invalid Order"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: order placed for purchasing the pet
        required: true
  '/store/order/{orderId}':
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: >-
        For valid response try integer IDs with value <= 5 or > 10. Other values
        will generated exceptions
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of pet that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            maximum: 5
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: >-
        For valid response try integer IDs with value < 1000. Anything above
        1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: string
            minimum: 1
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /store/subscribe:
    post:
      tags:
        - store
      summary: Subscribe to the Store events
      description: Add subscription for a store events
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                callbackUrl:
                  type: string
                  format: uri
                  description: This URL will be called by the server when the desired event will occur
                  example: https://myserver.com/send/callback/here
                eventName:
                  type: string
                  description: Event name for the subscription
                  enum:
                    - orderInProgress
                    - orderShipped
                    - orderDelivered
                  example: orderInProgress
              required:
                - callbackUrl
                - eventName
      responses:
        '201':
          description: Subscription added
          content:
            application/json:
              schema:
                type: object
                properties:
                  subscriptionId:
                    type: string
                    example: AAA-123-BBB-456
      callbacks:
        orderInProgress:
          '{$request.body#/callbackUrl}?event={$request.body#/eventName}':
            servers:
              - url: //callback-url.path-level/v1
                description: Path level server 1
              - url: //callback-url.path-level/v2
                description: Path level server 2
            post:
              summary: Order in Progress (Summary)
              description: A callback triggered every time an Order is updated status to "inProgress" (Description)
              externalDocs:
                description: Find out more
                url: 'https://more-details.com/demo'
              requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        orderId:
                          type: string
                          example: '123'
                        timestamp:
                          type: string
                          format: date-time
                          example: '2018-10-19T16:46:45Z'
                        status:
                          type: string
                          example: 'inProgress'
                  application/xml:
                    schema:
                      type: object
                      properties:
                        orderId:
                          type: string
                          example: '123'
                    example: |
                      <?xml version="1.0" encoding="UTF-8"?>
                      <root>
                        <orderId>123</orderId>
                        <status>inProgress</status>
                        <timestamp>2018-10-19T16:46:45Z</timestamp>
                      </root>
              responses:
                '200':
                  description: Callback successfully processed and no retries will be performed
                  content:
                    application/json:
                      schema:
                        type: object
                        properties:
                          someProp:
                            type: string
                            example: '123'
                '299':
                  description: Response for cancelling subscription
                '500':
                  description: Callback processing failed and retries will be performed
              x-codeSamples:
                - lang: 'C#'
                  source: |
                    PetStore.v1.Pet pet = new PetStore.v1.Pet();
                    pet.setApiKey("your api key");
                    pet.petType = PetStore.v1.Pet.TYPE_DOG;
                    pet.name = "Rex";
                    // set other fields
                    PetStoreResponse response = pet.create();
                    if (response.statusCode == HttpStatusCode.Created)
                    {
                      // Successfully created
                    }
                    else
                    {
                      // Something wrong -- check response for errors
                      Console.WriteLine(response.getRawResponse());
                    }
                - lang: PHP
                  source: |
                    $form = new \PetStore\Entities\Pet();
                    $form->setPetType("Dog");
                    $form->setName("Rex");
                    // set other fields
                    try {
                        $pet = $client->pets()->create($form);
                    } catch (UnprocessableEntityException $e) {
                        var_dump($e->getErrors());
                    }
            put:
              description: Order in Progress (Only Description)
              servers:
                - url: //callback-url.operation-level/v1
                  description: Operation level server 1 (Operation override)
                - url: //callback-url.operation-level/v2
                  description: Operation level server 2 (Operation override)
              requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        orderId:
                          type: string
                          example: '123'
                        timestamp:
                          type: string
                          format: date-time
                          example: '2018-10-19T16:46:45Z'
                        status:
                          type: string
                          example: 'inProgress'
                  application/xml:
                    schema:
                      type: object
                      properties:
                        orderId:
                          type: string
                          example: '123'
                    example: |
                      <?xml version="1.0" encoding="UTF-8"?>
                      <root>
                        <orderId>123</orderId>
                        <status>inProgress</status>
                        <timestamp>2018-10-19T16:46:45Z</timestamp>
                      </root>
              responses:
                '200':
                  description: Callback successfully processed and no retries will be performed
                  content:
                    application/json:
                      schema:
                        type: object
                        properties:
                          someProp:
                            type: string
                            example: '123'
        orderShipped:
          '{$request.body#/callbackUrl}?event={$request.body#/eventName}':
            post:
              description: |
                Very long description
                Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
                incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis
                nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
                Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu
                fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
                culpa qui officia deserunt mollit anim id est laborum.
              requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        orderId:
                          type: string
                          example: '123'
                        timestamp:
                          type: string
                          format: date-time
                          example: '2018-10-19T16:46:45Z'
                        estimatedDeliveryDate:
                          type: string
                          format: date-time
                          example: '2018-11-11T16:00:00Z'
              responses:
                '200':
                  description: Callback successfully processed and no retries will be performed
        orderDelivered:
          'http://notificationServer.com?url={$request.body#/callbackUrl}&event={$request.body#/eventName}':
            post:
              deprecated: true
              summary: Order delivered
              description: A callback triggered every time an Order is delivered to the recipient
              requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        orderId:
                          type: string
                          example: '123'
                        timestamp:
                          type: string
                          format: date-time
                          example: '2018-10-19T16:46:45Z'
              responses:
                '200':
                  description: Callback successfully processed and no retries will be performed
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /pay-with-iyzico/initialize:
    parameters:
      # TODO: Description bul
      - name: Authorization
        in: header
        description: "Unique bla bla bla"
        example: IYZWS YOUR_API_KEY:PKI_STRING
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        example: application/json
        required: true
        schema:
          type: string
      - name: x-iyzi-rnd
        in: header
        description: "Unique ID you will assign to header."
        example: 123ABC456
        required: true
        schema:
          type: string
    post:
      tags:
        - Pwi
      summary: Initialize - Pwi
      description: Given request initialize pay with iyzico page. <br/> There are 27(twenty-seven) distinguishable required variables in the payload.
      operationId: createPwi
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pwi-Initialize'
        description: Created user object
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pwi-Initialize-Response'
  /iyzipos/checkoutform/auth/ecom/detail:
    parameters:
      # TODO: Description bul
      - name: Authorization
        in: header
        description: "Unique bla bla bla"
        example: IYZWS YOUR_API_KEY:PKI_STRING
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        example: application/json
        required: true
        schema:
          type: string
      - name: x-iyzi-rnd
        in: header
        description: "Unique ID you will assign to header."
        example: 123ABC456
        required: true
        schema:
          type: string
    post:
      tags:
        - Pwi
      summary: Retrieve - Pwi
      description: Given request initialize pay with iyzico page. <br/> There are 27(twenty-seven) distinguishable required variables in the payload.
      operationId: retrievePwi
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pwi-Retrieve'
        description: Created user object
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pwi-Retrieve-Response'
  /refund:
    parameters:
      # TODO: Description bul
      - name: Authorization
        in: header
        description: "Unique bla bla bla"
        example: IYZWS YOUR_API_KEY:PKI_STRING
        required: true
        schema:
          type: string
      - name: Content-Type
        in: header
        example: application/json
        required: true
        schema:
          type: string
      - name: x-iyzi-rnd
        in: header
        description: "Unique ID you will assign to header."
        example: 123ABC456
        required: true
        schema:
          type: string
    post:
      tags:
        - Refund
      summary: Refund
      description: Given request refunds a transaction. <br/> There are 2(two) distinguishable required variables in the payload.
      operationId: createPwi
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Refund'
        description: Created user object
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund-Response'
  '/user/{username}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /user/createWithArray:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithArrayInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithListInput
      responses:
        default:
          description: successful operation
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
              examples:
                response:
                  value: OK
            application/xml:
              schema:
                type: string
              examples:
                response:
                  value:  <Message> OK </Message>
            text/plain:
              examples:
                response:
                  value:  OK
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      responses:
        default:
          description: successful operation
components:
  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    BasketItem:
      type: object
      required:
        - name
      properties:
        id:
          description: Basket item ID.
          type: string
        price:
          description: Price value for each item.<br/>Must be greater than zero.
          type: string
        name:
          description: Name of the item in the basket.
          type: string
        category1:
          description: Category 1 for item in the basket.
          type: string
        category2:
          description: Category 2 for item in the basket.
          type: string
        itemType:
          description: Item type.<br/>Valid values are PHYSICAL, VIRTUAL.
          type: string
    BillingAddress:
      type: object
      required:
        - name
      properties:
        address:
          description: Address details of billing address..
          type: string
        contactName:
          description: Contact name of billing address.
          type: string
        city:
          description: City name of billing address.
          type: string
        country:
          description: Country name of billing address.
          type: string
        zipCode:
          description: Zip code of billing address.
          type: string
    Buyer:
      type: object
      required:
        - name
      properties:
        id:
          description: Id of buyer.
          type: string
        name:
          description: Name of buyer.
          type: string
        surname:
          description: Surname of buyer.
          type: string
        identityNumber:
          description: Identity number of buyer.<br/>TCKN for Turkish merchants.<br/>Passport number foreign citizens.
          type: string
        email:
          description: Email of buyer.
          type: string
        gsmNumber:
          description: GSM number of buyer.
          type: string
        registrationAddress:
          description: Registration address of buyer.
          type: string
        city:
          description: City of buyer.
          type: string
        country:
          description: Country of buyer.
          type: string
        ip:
          description: IP of buyer.
          type: string
    Cancel:
      type: object
      required:
        - token
      properties:
        paymentId:
          description: ID of the payment.
          type: string
        ip:
          description: Buyer IP address
          type: string
        locale:
          description: "Language (default: tr)."
          type: string
        conversationId:
          description: Conversation ID to match request and response.
          type: string
      xml:
        name: Refund
    Cancel-Response:
      type: object
      properties:
        price:
          description: Total amount of order.
          type: string
        currency:
          description: Currency of request.
          type: string
        paymentId:
          description: ID of cancelled payment.
          type: string
        status:
          description: Service response result(success / failure).
          type: string
        locale:
          description: "Language(default: tr)."
          type: string
        systemTime:
          description: Response system timestamp value.
          type: integer
        conversationId:
          description: "If set, conversation ID to match request and response."
          type: string
      xml:
        name: Cancel-Response
    Cat:
      description: A representation of a cat
      allOf:
        - $ref: '#/components/schemas/Pet'
        - type: object
          properties:
            huntingSkill:
              type: string
              description: The measured skill for hunting
              default: lazy
              example: adventurous
              enum:
                - clueless
                - lazy
                - adventurous
                - aggressive
          required:
            - huntingSkill
    Category:
      type: object
      properties:
        id:
          description: Category ID
          allOf:
            - $ref: '#/components/schemas/Id'
        name:
          description: Category name
          type: string
          minLength: 1
        sub:
          description: Test Sub Category
          type: object
          properties:
            prop1:
              type: string
              description: Dumb Property
      xml:
        name: Category
    ConvertedPayout:
      type: object
      properties:
        paidPrice:
          description: Converted charged amount to card based on each item. Merchants should keep paidPrice in their system.
          type: number
        iyziCommissionFee:
          description: Converted iyzico commission fee based on each item.
          type: number
        iyziCommissionRateAmount:
          description: Converted iyzico commission rate amount based on each item.
          type: number
        blockageRateAmountMerchant:
          description: Converted blockage rate amount for merchant based on each item.
          type: number
        merchantPayoutAmount:
          description: Converted payout amount for each item transaction. This the amount that remains after substracting iyzicoCommissionRateAmount, iyzicoCommissionFee and blockageRateAmountMerchant from paidPrice(ItemTransactions).
          type: number
        iyziConversationRate:
          description: iyzico conversation rate.
          type: number
        iyziConversationRateAmount:
          description: iyzico conversation rate amount.
          type: number
        currency:
          description: Currency for payout conversion.
          type: string
    Dog:
      description: A representation of a dog
      allOf:
        - $ref: '#/components/schemas/Pet'
        - type: object
          properties:
            packSize:
              type: integer
              format: int32
              description: The size of the pack the dog is from
              default: 1
              minimum: 1
          required:
            - packSize
    HoneyBee:
      description: A representation of a honey bee
      allOf:
        - $ref: '#/components/schemas/Pet'
        - type: object
          properties:
            honeyPerDay:
              type: number
              description: Average amount of honey produced per day in ounces
              example: 3.14
              multipleOf: .01
          required:
            - honeyPerDay
    Id:
      type: integer
      format: int64
      readOnly: true
    ItemTransactions:
      type: object
      properties:
        paymentTransactionId:
          description: ID of basket item. Merchants should keep payment ID in their system (this ID will be used for cancel requests).
          type: string
        itemId:
          description: Item ID of each item in basket.
          type: string
        price:
          description: Item price of each item in basket.
          type: number
        paidPrice:
          description: Captured amount from card based on each item. Merchants should keep paidPrice in their system.
          type: number
        transactionStatus:
          description: Status of a payment transaction. (0 for waiting / -1 for rejected by fraud / 1 for waiting for approval / 2 for approved.
          type: integer
        blockageRate:
          description: Blockage rate based on each item.
          type: number
        blockageRateAmountMerchant:
          description: Blockage rate amount for merchant based on each item.
          type: number
        blockageResolvedDate:
          description: Blockage resolve date based on each item. Date format should be “2015-10-19 14:36:52”.
          type: string
        iyziCommissionFee:
          description: iyzico commission fee based on each item.
          type: number
        iyziCommissionRateAmount:
          description: iyzico commission rate amount based on each item.
          type: number
        merchantCommissionRate:
          description: Merchant commission rate (e.g. price=100 & paidPrice=110, then merchant commission rate = 10).
          type: number
        merchantCommissionRateAmount:
          description: Merchant commission rate amount (e.g. price=100 & paidPrice=110, then merchant commission rate amount = 10).
          type: number
        merchantPayoutAmount:
          description: Payout amount for each item transaction. This is the amount that remains after after substracting iyzicoCommissionRateAmount, iyzicoCommissionFee and blockageRateAmountMerchant from paidPrice(ItemTransactions).
          type: number
        convertedPayout:
          $ref: "#/components/schemas/ConvertedPayout"
    Order:
      type: object
      properties:
        id:
          description: Order ID
          allOf:
            - $ref: '#/components/schemas/Id'
        petId:
          description: Pet ID
          allOf:
            - $ref: '#/components/schemas/Id'
        quantity:
          type: integer
          format: int32
          minimum: 1
          default: 1
        shipDate:
          description: Estimated ship date
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          description: Indicates whenever order was completed or not
          type: boolean
          default: false
          readOnly: true
        requestId:
          description: Unique Request Id
          type: string
          writeOnly: true
      xml:
        name: Order
    Pet:
      type: object
      required:
        - name
        - photoUrls
      discriminator:
        propertyName: petType
        mapping:
          cat: '#/components/schemas/Cat'
          dog: '#/components/schemas/Dog'
          bee: '#/components/schemas/HoneyBee'
      properties:
        id:
          externalDocs:
            description: "Find more info here"
            url: "https://example.com"
          description: Pet ID
          allOf:
            - $ref: '#/components/schemas/Id'
        category:
          description: Categories this pet belongs to
          allOf:
            - $ref: '#/components/schemas/Category'
        name:
          description: The name given to a pet
          type: string
          example: Guru
        photoUrls:
          description: The list of URL to a cute photos featuring pet
          type: array
          maxItems: 20
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
            format: url
        friend:
          allOf:
            - $ref: '#/components/schemas/Pet'
        tags:
          description: Tags attached to the pet
          type: array
          minItems: 1
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: Pet status in the store
          enum:
            - available
            - pending
            - sold
        petType:
          description: Type of a pet
          type: string
      xml:
        name: Pet
    Tag:
      type: object
      properties:
        id:
          description: Tag ID
          allOf:
            - $ref: '#/components/schemas/Id'
        name:
          description: Tag name
          type: string
          minLength: 1
      xml:
        name: Tag
    User:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        pet:
          oneOf:
            - $ref: '#/components/schemas/Pet'
            - $ref: '#/components/schemas/Tag'
        username:
          description: User supplied username
          type: string
          minLength: 4
          example: John78
        firstName:
          description: User first name
          type: string
          minLength: 1
          example: John
        lastName:
          description: User last name
          type: string
          minLength: 1
          example: Smith
        email:
          description: User email address
          type: string
          format: email
          example: john.smith@example.com
        password:
          type: string
          description: >-
            User password, MUST contain a mix of upper and lower case letters,
            as well as digits
          format: password
          minLength: 8
          pattern: '/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/'
          example: drowssaP123
        phone:
          description: User phone number in international format
          type: string
          pattern: '/^\+(?:[0-9]-?){6,14}[0-9]$/'
          example: +1-202-555-0192
        userStatus:
          description: User status
          type: integer
          format: int32
      xml:
        name: User
    Pwi-Initialize:
      type: object
      required:
        - price
      properties:
        locale:
          description: "Language(default:tr). Alternative is en."
          type: string
        conversationId:
          description: Conversation ID to match request and response.
          type: string
        price:
          description: "Total amount of basket.<br/>The sum of basket items' amount must be equal to the price of basket."
          type: number
        paidPrice:
          description: "Final amount (including installment fee) that will be charge from customer's card."
          type: number
        currency:
          description: "Default currency is TRY.<br/>Alternatives are USD, EUR, GBP and IRR."
          type: string
        enabledInstallments:
          description: "Enabled installment values."
          type: integer
        basketId:
          description: "Merchant's basket Id."
          type: string
        paymentGroup:
          description: "Payment group (default: PRODUCT).<br/>Valid values are PRODUCT, LISTING, SUBSCRIPTION."
          type: string
        paymentSource:
          description: "Payment source. Valid values are SHOPIFY, MAGENTO, PRESTASHOP, WOOCOMMERCE, OPENCART."
          type: string
        callbackUrl:
          description: "Merchant callback URL for payment result notification."
          type: string
        buyer:
          $ref: "#/components/schemas/Buyer"
        shippingAddress:
          $ref: "#/components/schemas/ShippingAddress"
        billingAddress:
          $ref: "#/components/schemas/BillingAddress"
        basketItem:
          $ref: "#/components/schemas/BasketItem"
      xml:
        name: Pwi-Initialize
    Pwi-Initialize-Response:
      type: object
      properties:
        payWithIyzicoPageUrl:
          description: Unique link of pay with iyzico page.<br/>The end user should be directed to this page
          type: string
        token:
          description: Unique value created for each pay with iyzico request.<br/>This token is also used to access the payment result
          type: string
        tokenExpireTime:
          description: Expiration time of the token and pay with iyzico page
          type: Integer
        status:
          description: Service response result(success / failure).
          type: string
        locale:
          description: "Language(default: tr)."
          type: string
        systemTime:
          description: Response system timestamp value.
          type: integer
        conversationId:
          description: "If set, conversation ID to match request and response."
          type: string
      xml:
        name: Pwi-Initialize-Response
    Pwi-Retrieve:
      type: object
      required:
        - token
      properties:
        locale:
          description: "Language(default:tr). Alternative is en."
          type: string
        conversationId:
          description: Conversation ID to match request and response.
          type: string
        token:
          description: Unique value created for each checkout form request.<br/>This token is used to access the payment result
          type: string
      xml:
        name: Pwi-Retrieve
    Pwi-Retrieve-Response:
      type: object
      properties:
        status:
          description: Service response result(success / failure).
          type: string
        locale:
          description: "Language(default: tr)."
          type: string
        systemTime:
          description: Response system timestamp value.
          type: integer
        conversationId:
          description: "If set, conversation ID to match request and response."
          type: string
        paymentId:
          description: ID of the payment. Merchants should keep payment ID in their system (this ID will be used for cancel requests).
          type: string
        price:
          description: Total amount of basket. The sum of basket items’ amount must be equal to the price of basket.
          type: number
        paidPrice:
          description: Final amount (including installment fee) that will be charged to customer’s card. Merchants should store this value in their system.
          type: number
        currency:
          description: Currency of request.
          type: string
        installment:
          description: Installment number of payment, for single payments it returns 1. Valid values are 1, 2, 3, 6, 9, 12.
          type: number
        basketId:
          description: Merchant's basket ID.
          type: string
        binNumber:
          description: First 6 digit of card.
          type: string
        cardAssociation:
          description: Valid values are VISA, MASTER_CARD, AMERICAN_EXPRESS, TROY.
          type: string
        cardFamily:
          description: Valid values are Bonus, Axess, World, Maximum, Paraf, CardFinans, Advantage.
          type: string
        cardType:
          description: Valid values are CREDIT_CARD, DEBIT_CARD, PREPAID_CARD.
          type: string
        fraudStatus:
          description: Fraud risk status for payment request (0 for review / 1 for accept).
          type: integer
        iyziCommissionFee:
          description: iyzico commission fee for payment transaction
          type: number
        iyziCommissionRateAmount:
          description: iyzico commission rate amount for payment transaction.
          type: number
        merchantCommissionRate:
          description: Merchant commission rate (e.g. price=100 & paidPrice=110, then merchant commission rate = 10).
          type: number
        merchantCommissionRateAmount:
          description: Merchant commission rate amount (e.g. price=100 & paidPrice=110, then merchant commission rate amount = 10).
          type: number
        itemTransactions:
          $ref: "#/components/schemas/ItemTransactions"
      xml:
        name: Pwi-Initialize-Response
    Refund:
      type: object
      required:
        - token
      properties:
        paymentTransactionId:
          description: "ID of the basket item that needs to be refunded."
          type: string
        price:
          description: Amount that needs to be refunded.
          type: string
        ip:
          description: Buyer IP address
          type: string
        locale:
          description: "Language (default: tr)."
          type: string
        conversationId:
          description: Conversation ID to match request and response.
          type: string
      xml:
        name: Refund
    Refund-Response:
      type: object
      properties:
        price:
          description: Total amount of basket. The sum of basket items’ amount must be equal to the price of basket.
          type: number
        currency:
          description: Currency of request.
          type: string
        paymentId:
          description: ID of the payment. Merchants should keep payment ID in their system (this ID will be used for cancel requests).
          type: string
        paymentTransactionId:
          description: ID of the basket item that was refunded.
          type: string
        status:
          description: Service response result(success / failure).
          type: string
        locale:
          description: "Language(default: tr)."
          type: string
        systemTime:
          description: Response system timestamp value.
          type: integer
        conversationId:
          description: "If set, conversation ID to match request and response."
          type: string
      xml:
        name: Refund-Response
    ShippingAddress:
      type: object
      required:
        - name
      properties:
        address:
          description: Address details of shipping address.
          type: string
        contactName:
          description: Contact name of shipping address.
          type: string
        city:
          description: City name of shipping address.
          type: string
        country:
          description: Country name of shipping address.
          type: string
        zipCode:
          description: Zip code of shipping address.
          type: string
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            allOf:
              - description: My Pet
                title: Pettie
              - $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            type: 'object'
            properties:
              name:
                type: string
                description: hooray
      description: Pet object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    apiKey:
      description: >
        Your private API key.
      type: apiKey
      name: apiKey
      in: header
    secretKey:
      description: >
        Your private SECRET key.
      type: apiKey
      name: secretKey
      in: header
  examples:
    Order:
      value:
        quantity: 1
        shipDate: '2018-10-19T16:46:45Z'
        status: placed
        complete: false
x-webhooks:
  newPet:
    post:
      summary: New pet
      description: Information about a new pet in the systems
      operationId: newPet
      tags: 
        - pet
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
      responses:
        "200":
          description: Return a 200 status to indicate that the data was received successfully